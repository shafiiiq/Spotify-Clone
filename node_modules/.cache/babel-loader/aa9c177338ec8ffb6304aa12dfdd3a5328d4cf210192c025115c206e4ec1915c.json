{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cloned Projects\\\\spotify\\\\src\\\\context\\\\SearchContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchContext = /*#__PURE__*/createContext();\nexport const SearchProvider = ({\n  children\n}) => {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: {\n      searchQuery,\n      setSearchQuery\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n// // check serach button is clicked \n// export const IsClicked = createContext();\n\n// export const SearchIsClicked = ({ children }) => {\n//   const [isSearch, setIsSearch] = useState(false);\n\n//   return (\n//     <IsClicked.Provider value={{ isSearch, setIsSearch }}>\n//       {children}\n//     </IsClicked.Provider>\n//   );\n// };\n_s(SearchProvider, \"uixqA8hxOTN7LqZPWxVzG2fnyhQ=\");\n_c = SearchProvider;\nvar _c;\n$RefreshReg$(_c, \"SearchProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","SearchContext","SearchProvider","children","_s","searchQuery","setSearchQuery","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Cloned Projects/spotify/src/context/SearchContext.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const SearchContext = createContext();\r\n\r\nexport const SearchProvider = ({ children }) => {\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n    return (\r\n        <SearchContext.Provider value={{ searchQuery, setSearchQuery }}>\r\n            {children}\r\n        </SearchContext.Provider>\r\n    );\r\n};\r\n\r\n\r\n// // check serach button is clicked \r\n// export const IsClicked = createContext();\r\n\r\n// export const SearchIsClicked = ({ children }) => {\r\n//   const [isSearch, setIsSearch] = useState(false);\r\n\r\n//   return (\r\n//     <IsClicked.Provider value={{ isSearch, setIsSearch }}>\r\n//       {children}\r\n//     </IsClicked.Provider>\r\n//   );\r\n// };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMK,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElD,oBACIE,OAAA,CAACC,aAAa,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,WAAW;MAAEC;IAAe,CAAE;IAAAH,QAAA,EAC1DA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;;AAGD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAAR,EAAA,CAtBaF,cAAc;AAAAW,EAAA,GAAdX,cAAc;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}