{"ast":null,"code":"var _jsxFileName = \"C:\\\\Cloned Projects\\\\spotify\\\\src\\\\context\\\\SearchContext.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { createContext, useState } from 'react';\n\n// export const SearchContext = createContext();\n\n// export const SearchProvider = ({ children }) => {\n//     const [searchQuery, setSearchQuery] = useState('');\n\n//     return (\n//         <SearchContext.Provider value={{ searchQuery, setSearchQuery }}>\n//             {children}\n//         </SearchContext.Provider>\n//     );\n// };\n\n// check serach button is clicked \nexport const IsClicked = createContext();\nexport const SearchIsClicked = ({\n  children\n}) => {\n  _s();\n  const [isSearch, setIsSearch] = useState(false);\n  return /*#__PURE__*/_jsxDEV(IsClicked.Provider, {\n    value: {\n      isSearch,\n      setIsSearch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchIsClicked, \"MCprB3c2SULg2AFll4uoUaVL3mE=\");\n_c = SearchIsClicked;\nvar _c;\n$RefreshReg$(_c, \"SearchIsClicked\");","map":{"version":3,"names":["IsClicked","createContext","SearchIsClicked","children","_s","isSearch","setIsSearch","useState","_jsxDEV","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Cloned Projects/spotify/src/context/SearchContext.jsx"],"sourcesContent":["// import React, { createContext, useState } from 'react';\r\n\r\n// export const SearchContext = createContext();\r\n\r\n// export const SearchProvider = ({ children }) => {\r\n//     const [searchQuery, setSearchQuery] = useState('');\r\n\r\n//     return (\r\n//         <SearchContext.Provider value={{ searchQuery, setSearchQuery }}>\r\n//             {children}\r\n//         </SearchContext.Provider>\r\n//     );\r\n// };\r\n\r\n\r\n// check serach button is clicked \r\nexport const IsClicked = createContext();\r\n\r\nexport const SearchIsClicked = ({ children }) => {\r\n  const [isSearch, setIsSearch] = useState(false);\r\n\r\n  return (\r\n    <IsClicked.Provider value={{ isSearch, setIsSearch }}>\r\n      {children}\r\n    </IsClicked.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAO,MAAMA,SAAS,GAAGC,aAAa,CAAC,CAAC;AAExC,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAE/C,oBACEC,OAAA,CAACR,SAAS,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEC;IAAY,CAAE;IAAAH,QAAA,EAClDA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEzB,CAAC;AAACV,EAAA,CARWF,eAAe;AAAAa,EAAA,GAAfb,eAAe;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}